import lessonPlansData from '@/services/mockData/lessonPlans.json'

class LessonPlanService {
  constructor() {
    this.data = [...lessonPlansData]
  }

  async delay(ms = 300) {
    return new Promise(resolve => setTimeout(resolve, ms))
  }

  async getAll() {
    await this.delay()
    return [...this.data]
  }

  async getById(id) {
    await this.delay()
    const item = this.data.find(item => item.Id === parseInt(id))
    return item ? { ...item } : null
  }

async create(item) {
    await this.delay()
    const newId = Math.max(...this.data.map(item => item.Id), 0) + 1
    const newItem = {
      ...item,
      Id: newId,
      googleDriveExported: false,
      googleDriveUrl: '',
      exportedAt: null
    }
    this.data.push(newItem)
    return { ...newItem }
  }

  async update(id, updates) {
    await this.delay()
    const index = this.data.findIndex(item => item.Id === parseInt(id))
    if (index !== -1) {
      this.data[index] = { ...this.data[index], ...updates }
      return { ...this.data[index] }
    }
    throw new Error('Item not found')
  }

  async delete(id) {
    await this.delay()
    const index = this.data.findIndex(item => item.Id === parseInt(id))
    if (index !== -1) {
      const deleted = this.data.splice(index, 1)[0]
      return { ...deleted }
    }
throw new Error('Item not found')
  }

  async downloadFile(id) {
    await this.delay()
    const item = this.data.find(item => item.Id === parseInt(id))
    if (!item) {
      throw new Error('File not found')
    }
    
    if (item.status !== 'completed') {
      throw new Error('File is not ready for download')
    }

    // Create a sample .docx file content (in real implementation, this would come from actual file storage)
    const sampleContent = `
      Document: ${item.fileName}
      Subject: ${item.subject}
      Grade: ${item.grade}
      Topics: ${item.topics.join(', ')}
      
      Generated on: ${new Date().toLocaleDateString()}
      
      This is a sample lesson plan document generated by the system.
    `
    
    // Create blob with proper MIME type for Word documents
    const blob = new Blob([sampleContent], {
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    })
    
    return blob
  }
}

export const lessonPlanService = new LessonPlanService()